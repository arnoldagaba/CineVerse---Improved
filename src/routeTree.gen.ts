/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as DiscoverRouteImport } from './routes/discover'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TvTvIdRouteImport } from './routes/tv/$tvId'
import { Route as PersonPersonIdRouteImport } from './routes/person/$personId'
import { Route as MovieMovieIdRouteImport } from './routes/movie/$movieId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoverRoute = DiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvTvIdRoute = TvTvIdRouteImport.update({
  id: '/tv/$tvId',
  path: '/tv/$tvId',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonPersonIdRoute = PersonPersonIdRouteImport.update({
  id: '/person/$personId',
  path: '/person/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieMovieIdRoute = MovieMovieIdRouteImport.update({
  id: '/movie/$movieId',
  path: '/movie/$movieId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/discover': typeof DiscoverRoute
  '/search': typeof SearchRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/discover': typeof DiscoverRoute
  '/search': typeof SearchRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/discover': typeof DiscoverRoute
  '/search': typeof SearchRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/discover'
    | '/search'
    | '/movie/$movieId'
    | '/person/$personId'
    | '/tv/$tvId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/discover'
    | '/search'
    | '/movie/$movieId'
    | '/person/$personId'
    | '/tv/$tvId'
  id:
    | '__root__'
    | '/'
    | '/discover'
    | '/search'
    | '/movie/$movieId'
    | '/person/$personId'
    | '/tv/$tvId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiscoverRoute: typeof DiscoverRoute
  SearchRoute: typeof SearchRoute
  MovieMovieIdRoute: typeof MovieMovieIdRoute
  PersonPersonIdRoute: typeof PersonPersonIdRoute
  TvTvIdRoute: typeof TvTvIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discover': {
      id: '/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof DiscoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tv/$tvId': {
      id: '/tv/$tvId'
      path: '/tv/$tvId'
      fullPath: '/tv/$tvId'
      preLoaderRoute: typeof TvTvIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/person/$personId': {
      id: '/person/$personId'
      path: '/person/$personId'
      fullPath: '/person/$personId'
      preLoaderRoute: typeof PersonPersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/$movieId': {
      id: '/movie/$movieId'
      path: '/movie/$movieId'
      fullPath: '/movie/$movieId'
      preLoaderRoute: typeof MovieMovieIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiscoverRoute: DiscoverRoute,
  SearchRoute: SearchRoute,
  MovieMovieIdRoute: MovieMovieIdRoute,
  PersonPersonIdRoute: PersonPersonIdRoute,
  TvTvIdRoute: TvTvIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
